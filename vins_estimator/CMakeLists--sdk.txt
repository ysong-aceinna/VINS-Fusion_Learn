cmake_minimum_required(VERSION 2.8.3)
project(vins)

############### Choose driver type #################
option (ENABLE_MYNT_SDK "Enable MYNT SDK." ON)
option (ENABLE_MYNT_ROS "Enable MYNT ROS driver." OFF)
####################################################

############## Set Release or Debug ################
set(COMPILE_TYPE Release)
if(COMPILE_TYPE STREQUAL "Release")
  set(CMAKE_BUILD_TYPE "Release")
  set(CMAKE_CXX_FLAGS "-std=c++11")
  set(CMAKE_CXX_FLAGS_RELEASE "-O3 -Wall -g")
elseif(COMPILE_TYPE STREQUAL "Debug")
  SET(CMAKE_BUILD_TYPE "Debug")
  SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb")
else()
  message(FATAL_ERROR "COMPILE_TYPE is Error!")
endif()
  message(AUTHOR_WARNING "COMPILE_TYPE = ${COMPILE_TYPE}")
####################################################
find_package(Threads REQUIRED)

##################### setting ######################
configure_file (
  "${PROJECT_SOURCE_DIR}/src/driver/config.h.in"
  "${PROJECT_BINARY_DIR}/config.h"
  )

# set(CMAKE_INCLUDE_CURRENT_DIR ON) #used to find config.h
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

set(MINIGLOG_PATH ${PROJECT_SOURCE_DIR}/src/miniglog)
###libminiglog.dylib for Mac and libminiglog.so for Linux in below line.
set(MINIGLOG_LIBS ${MINIGLOG_PATH}/build/lib/libminiglog.so) 
set(MINIGLOG_INCLUDE_DIRS ${MINIGLOG_PATH}/build/include)

# set(CAMERA_MODELS_PATH /home/song/catkin_ws/src/VINS-Fusion_Learn/camera_models)
set(CAMERA_MODELS_PATH ${PROJECT_SOURCE_DIR}/../camera_models)
set(CAMERA_MODELS_LIBS ${CAMERA_MODELS_PATH}/build/libcamera_models.a) 
set(CAMERA_MODELS_INCLUDE_DIRS ${CAMERA_MODELS_PATH}/include)

set(DRIVER_LIBS driver_lib)
####################################################

############## find relevant packages ##############
find_package(Ceres REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(OpenCV REQUIRED)
message(AUTHOR_WARNING "OpenCV_VERSION: ${OpenCV_VERSION}")
# find_package(camera_models REQUIRED)

####################################################

############## include_directories #################
include_directories(${CERES_INCLUDE_DIRS} ${EIGEN3_INCLUDE_DIR})
include_directories(${MINIGLOG_INCLUDE_DIRS} ${CAMERA_MODELS_INCLUDE_DIRS})
include_directories(${PROJECT_BINARY_DIR})#used to find config.h
####################################################
set(DRIVER_SOURCES 
    src/utility/visual_sdk.cpp
    src/driver/adapter.cpp
    src/driver/driver.cpp
    src/driver/cv_painter.cpp
    src/driver/simulator.cpp
    src/driver/mynt_S1030.cpp)

################# set by switch ####################
if (ENABLE_MYNT_SDK)
  set(DRIVER_LIBS ${DRIVER_LIBS} mynteye)
elseif(ENABLE_MYNT_ROS)
  catkin_package()
  find_package(catkin REQUIRED COMPONENTS
      roscpp
      std_msgs
      geometry_msgs
      nav_msgs
      tf
      cv_bridge
      camera_models
      image_transport)
  include_directories(${catkin_INCLUDE_DIRS})
  set(DRIVER_LIBS ${DRIVER_LIBS} ${catkin_LIBRARIES})

  set(DRIVER_SOURCES ${DRIVER_SOURCES} 
  src/utility/mynt_S1030_ros.cpp
  src/utility/visual_ros.cpp
  src/utility/visualization.cpp
  src/utility/CameraPoseVisualization.cpp)

endif()
####################################################

################ Add subdirectory ##################
add_subdirectory( ${PROJECT_SOURCE_DIR}/src/driver)
####################################################

############### Generate lib and exe ###############
add_library(vins_lib
    src/estimator/parameters.cpp
    src/estimator/estimator.cpp
    src/estimator/feature_manager.cpp
    src/factor/pose_local_parameterization.cpp
    src/factor/projectionTwoFrameOneCamFactor.cpp
    src/factor/projectionTwoFrameTwoCamFactor.cpp
    src/factor/projectionOneFrameTwoCamFactor.cpp
    src/factor/marginalization_factor.cpp
    src/utility/utility.cpp
    ${DRIVER_SOURCES}
    src/initial/solve_5pts.cpp
    src/initial/initial_aligment.cpp
    src/initial/initial_sfm.cpp
    src/initial/initial_ex_rotation.cpp
    src/featureTracker/feature_tracker.cpp)
target_link_libraries(vins_lib camera_models ${OpenCV_LIBS} ${CERES_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})

add_executable(vins_node src/main.cpp)
target_link_libraries(vins_node vins_lib ${DRIVER_LIBS}) 
